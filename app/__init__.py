from flask import Flask
from flask_sqlalchemy import SQLAlchemy
from flask_login import LoginManager
from flask_migrate import Migrate
from config import Config

# âœ… DÃ©claration des extensions
db = SQLAlchemy()
login_manager = LoginManager()
migrate = Migrate()

def create_app(config_class=Config):
    app = Flask(__name__)
    app.config.from_object(config_class)

    db.init_app(app)
    login_manager.init_app(app)
    migrate.init_app(app, db)

    login_manager.login_view = "auth.login"
    login_manager.login_message = "Veuillez vous connecter pour accÃ©der Ã  cette page."

    # âœ… Importation diffÃ©rÃ©e pour Ã©viter l'import circulaire
    with app.app_context():
        from app import models  # Import des modÃ¨les seulement aprÃ¨s init du db
        print("[INFO] VÃ©rification et application des migrations...")
        models.create_admin()

    # ðŸ“Œ Import des blueprints ici
    from app.routes.auth import auth_bp
    from app.routes.admin import admin_bp  # VÃ©rifie qu'il est bien importÃ© ici
    from app.routes.main import main_bp  # S'il y a une page principale

    # ðŸ“Œ Enregistrement des blueprints
    app.register_blueprint(auth_bp)  # Assure-toi qu'il est dÃ©fini une seule fois
    app.register_blueprint(admin_bp)
    app.register_blueprint(main_bp)
    @login_manager.user_loader
    def load_user(user_id):
        from app.models import User  # âœ… Importer ici pour Ã©viter l'import circulaire
        return User.query.get(int(user_id))
                           
    return app
